import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime

class EmailSender:
    def __init__(self, config):
        self.smtp_server = config.smtp_server
        self.smtp_port = config.smtp_port
        self.username = config.email_sender
        self.password = config.email_password
        self.recipient = config.email_recipient
        
        self.logger = logging.getLogger(__name__)

    def send_job_listings_email(self, job_listings):
        """Send an email with the job listings (organized by team or flat list)"""
        if not job_listings:
            return
        
        # Handle both formats: dict (organized by team) or list (flat)
        if isinstance(job_listings, dict):
            # Calculate total jobs across all teams
            total_jobs = sum(len(jobs) for jobs in job_listings.values())
            jobs_by_team = job_listings
        else:
            # Flat list format - group by team
            total_jobs = len(job_listings)
            jobs_by_team = {}
            for job in job_listings:
                team = job['team']
                if team not in jobs_by_team:
                    jobs_by_team[team] = []
                jobs_by_team[team].append(job)
            
        subject = f"NBA Career Opportunities - {total_jobs} Jobs Found ({datetime.now().strftime('%Y-%m-%d')})"
        body = self._format_job_listings_email(jobs_by_team, total_jobs)
        
        self.send_email(self.recipient, subject, body)

    def _format_job_listings_email(self, jobs_by_team, total_jobs):
        """Format job listings into a readable email body"""
        header = f"""
NBA Career Opportunities Report
Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Total Jobs Found: {total_jobs}
Teams with Openings: {len(jobs_by_team)}

"""
        
        body_parts = [header]
        
        for team, jobs in sorted(jobs_by_team.items()):
            body_parts.append(f"\n{'='*50}")
            body_parts.append(f"{team.upper()} ({len(jobs)} jobs)")
            body_parts.append('='*50)
            
            for job in jobs:
                body_parts.append(f"\nüìã Title: {job['title']}")
                if job['location']:
                    body_parts.append(f"üìç Location: {job['location']}")
                if job['description']:
                    body_parts.append(f"üìù Description: {job['description']}")
                body_parts.append(f"üîó Apply: {job['url']}")
                body_parts.append(f"‚è∞ Scraped: {job['scraped_at']}")
                body_parts.append("-" * 30)
        
        footer = """

Best of luck with your applications!

This report was automatically generated by the NBA Career Scraper.
To stop receiving these emails, please contact the administrator.
"""
        
        body_parts.append(footer)
        return '\n'.join(body_parts)

    def send_email(self, recipient, subject, body):
        """Send an email with the specified content"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self.username
            msg['To'] = recipient
            msg['Subject'] = subject

            msg.attach(MIMEText(body, 'plain', 'utf-8'))

            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.username, self.password)
                server.send_message(msg)
                
            self.logger.info(f"Email sent successfully to {recipient}")
            
        except Exception as e:
            self.logger.error(f"Failed to send email: {e}")
            raise

    def send_error_notification(self, error_message):
        """Send an email notification about scraper errors"""
        subject = f"NBA Career Scraper Error - {datetime.now().strftime('%Y-%m-%d')}"
        body = f"""
An error occurred while running the NBA Career Scraper:

Error: {error_message}
Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Please check the application logs for more details.
"""
        
        try:
            self.send_email(self.recipient, subject, body)
        except Exception as e:
            self.logger.error(f"Failed to send error notification: {e}")

    def send_no_jobs_notification(self):
        """Send a notification when no jobs matching keywords are found"""
        subject = f"NBA Career Scraper - No Jobs Found - {datetime.now().strftime('%Y-%m-%d')}"
        body = f"""
NBA Career Opportunities Report
Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

No job openings matching your keywords were found today.

The scraper successfully checked all NBA team career pages, but no positions
matched your specified keywords. This could mean:

‚Ä¢ All teams are currently fully staffed for roles matching your interests
‚Ä¢ New positions haven't been posted yet
‚Ä¢ Some team websites may be experiencing technical issues

The scraper will continue checking automatically and notify you when matching
opportunities become available.

This report was automatically generated by the NBA Career Scraper.
"""
        
        try:
            self.send_email(self.recipient, subject, body)
        except Exception as e:
            self.logger.error(f"Failed to send no jobs notification: {e}")

    def format_job_list(self, job_list):
        """Legacy method for backward compatibility"""
        formatted_jobs = []
        for job in job_list:
            formatted_jobs.append(f"{job['team']}: {job['title']} - {job['url']}")
        return "\n".join(formatted_jobs)